// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User{
  id Int @id @default(autoincrement())
  name String
  email String @unique
  bio String?
  avatar String?
  password String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  posts Post[]
  comments Comment[]
  likes Like[]
}

model Post{
  id Int @id @default(autoincrement())
  slug String? @unique
  title String
  content String
  thumbnail String?
  published Boolean
  authorId Int
  author User @relation(fields:[authorId],references:[id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  comments Comment[]

  // many to many relation with tags table 
  // in PostTags table it will store the id of the post and id of the tag
  tags Tag[] @relation("PostTags")

  likes Like[]
}

model Comment{
  id Int @id @default(autoincrement())
  content String
  postId Int
  post Post @relation(fields: [postId] ,references: [id],onDelete: Cascade)
  authorId Int
  author User @relation(fields: [authorId],references: [id])
    createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Tag{
  id Int @id @default(autoincrement())
  name String @unique
   // many to many relation with post table 
  // in PostTags table it will store the id of the post and id of the tag
  posts Post[] @relation("PostTags")
}

model Like{
  id Int @id @default(autoincrement())
  userId Int
  postId Int
  user User @relation(fields: [userId],references: [id])
  post Post @relation(fields: [postId],references: [id],onDelete: Cascade)

  @@unique([userId,postId])
}
  
